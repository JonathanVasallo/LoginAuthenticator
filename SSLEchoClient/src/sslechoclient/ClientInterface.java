/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sslechoclient;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.Properties;
import java.util.Random;
import java.util.Scanner;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.Properties;
import java.util.Random;
import java.util.Scanner;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.net.UnknownHostException;
import java.util.Scanner;
import java.io.PrintWriter;
import java.io.IOException;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JFrame;
import java.awt.*;
import java.net.*;
import javax.swing.*;
import java.awt.event.*;

/**
 *
 * @author jvasa
 */
public class ClientInterface extends javax.swing.JFrame {

    /**
     * Creates new form ClientInterface
     */
    public ClientInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 204, 0));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Create Account");
        jButton2.setDefaultCapable(false);
        jButton2.setName("CREATE"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Connect To Local Server");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Login Authenticator");

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 49, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 568, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButton4.setText("Exit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setText("In order for the Login Authenticator to work accordingly");

        jLabel4.setText("Make sure that the local server is running before connecting");

        jButton5.setText("View More Of My Work");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setText("Made By Jonathan Vasallo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(0, 64, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(150, 150, 150))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(23, 23, 23)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addGap(91, 91, 91))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(124, 124, 124)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)))
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(142, 142, 142)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton5))
                        .addContainerGap())
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Connect To Local Server Button
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        getInputConnect("127.0.0.1", "5000");
        Boolean check = ConnectToServer();
        // checks if the server is connected if not then the connection 
        // has failed
        if (check == true) {
            theConnection = true;
            jButton3.setText("Connect Locally");
            jButton3.setEnabled(false);
            jButton3.setForeground(Color.BLACK);
            try {
                sock.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientInterface.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButton3ActionPerformed
    // This is the Login Button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (theConnection == true) {
            //login 
            msg = "AUTH";

            try {
                ConnectToServer();
                Messaging();

            } catch (MessagingException ex) {
                Logger.getLogger(ClientInterface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ClientInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Must Connect to the server first");
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    // This is the Create an account Button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (theConnection == true) {
            //Create Acc    
            msg = "CREATE";

            try {
                ConnectToServer();
                Messaging();

            } catch (MessagingException ex) {
                Logger.getLogger(ClientInterface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ClientInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Must Connect to the server first");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            //This Button Exits the program and closes the connection from 
            // the server to client
            if (theConnection == true) {
                send.println("Close Connection");
                sock.close();
            } else {
                System.exit(0);
            }
        } catch (IOException ex) {
            Logger.getLogger(ClientInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // This Button sends the clicker directly to my online portfolio.
        URI uri = null;
        try {
            uri = new URI("https://jonathanvasallo.com/");
        } catch (URISyntaxException ex) {
            Logger.getLogger(ClientInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);
            } catch (Exception ex) {
            }
        } else {
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    static String IP;
    static int PORT_NUM;
    static int OTP;
    static String theEmail;
    static String msg;
    static Boolean theConnection = false;
    static Scanner recv = null;
    static PrintWriter send = null;
    static Boolean run = false;
    private static SSLSocket sock = null;
    static int firstConnect = 0;

    public static void main(String args[]) throws MessagingException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientInterface().setVisible(true);
            }
        });

        while (run == false) {
            // wait
        }
        System.exit(0);

    }

    /*
  getUsernamePass method allows the user a way to input their desired username 
  and desired password (hidden from view) and returns a string in the format 
  of :username:password. 
     */
    public static String getUsernamePass() {
        JPasswordField jpf = new JPasswordField(24);
        JLabel jl = new JLabel("Enter Your Password: ");
        Box box = Box.createHorizontalBox();
        box.add(jl);
        box.add(jpf);
        System.out.println("A Popup window  should have appeared");
        String username = JOptionPane.showInputDialog("What is the Username?");
        String userEmail = JOptionPane.showInputDialog("Enter your email");
        while (userEmail.endsWith(".com") == false) {

            userEmail = JOptionPane.showInputDialog("Invalid Email Enter your email again");
        }
        theEmail = userEmail;
        System.out.println(theEmail + " <global | local> " + userEmail);
        int x = JOptionPane.showConfirmDialog(null, box, "Password", JOptionPane.OK_CANCEL_OPTION);
        System.out.println(jpf.getText());
        String usernamepluscolonplusPass = ":" + username + ":" + jpf.getText() + ":" + theEmail;
        System.out.println("Test 2 " + usernamepluscolonplusPass);
        return usernamepluscolonplusPass;

    }
    /*
    getUsernamePassOnly method is used for the login option on the clients
    end. It creates a dialog where the client user can enter the username of
    the account created previously and it also provides a JPassword field 
    where the client user can enter their chosen password that they make when 
    creating their account. The password field text will not be visible for
    safety. The username and password information entered will then be assembled
    into a single string separated by a ":" and returned back to where the
    function was called.
    */
    public static String getUsernamePassOnly() {
        JPasswordField jpf = new JPasswordField(24);
        JLabel jl = new JLabel("Enter Your Password: ");
        Box box = Box.createHorizontalBox();
        box.add(jl);
        box.add(jpf);
        System.out.println("A Popup window  should have appeared");
        String username = JOptionPane.showInputDialog("What is the Username you would like to use?");
        int x = JOptionPane.showConfirmDialog(null, box, "Password", JOptionPane.OK_CANCEL_OPTION);
        System.out.println(jpf.getText());
        String usernamepluscolonplusPass = ":" + username + ":" + jpf.getText();
        System.out.println("Test Only user and password " + usernamepluscolonplusPass);
        return usernamepluscolonplusPass;

    }

    /*
    sendEmail method takes the OTP that was generated using a Secure Random
    number generator and uses it to replay the email to the recipient who
    requested the verification OTP
     */
    public static Message sendEmail(String theOTP) throws MessagingException {
        Random rand = new Random();
        OTP = rand.nextInt(999999);
        String strOTP = String.valueOf(OTP);
        String myEmail = "LoginVerifyOTPSender@gmail.com";
        String host = "localhost";
        String recepient = theEmail;
        System.out.println("This is the recepient email variable" + theEmail);
        Properties properties = new Properties();
        properties.put("mail.smtp.user", myEmail);
        properties.put("mail.smtp.host", "smtp.gmail.com");
        properties.put("mail.smtp.port", "587");
        properties.put("mail.smtp.starttls.enable", true);
        properties.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        properties.put("mail.smtp.auth", "true");
        //setup mail server
        String mypass = "Loginverify123";
        Session session = Session.getInstance(properties, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(myEmail, mypass);
            }
        });

        Message message = prepareMessage(session, myEmail, recepient, strOTP);
        Transport.send(message);
        return null;
    }

    /*
    prepareMessage Method Takes in a Session and 3 Strings which contains:
    1. The Email of the OTP Sender
    2. The Email of the Recipient -> The Client User Requesting Verification
    3. The Secure Random Number OTP
    This method then gets the email ready to be send and returns the format
    for which the OTP verification email will be sent. 
     */
    public static Message prepareMessage(Session session, String myEmail, String recepient, String OTP) {
        try {
            //Create a default MimeMessage Object
            Message message = new MimeMessage(session);
            //Set From: header field of the header
            message.setFrom(new InternetAddress(myEmail));
            //Set To: header feild of the header
            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recepient));
            //Set Subject
            message.setSubject("This is the subject line!");
            //Make message
            message.setContent("<h1>This is your OTP:" + OTP + "</h1>", "text/html");
            //send 
            //Transport.send(message);
            System.out.println("Message sent successfully");
            return message;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    /*
    getInputConnect method gathers up the information neccessary to connect
    the client to the servers network and sets them to global variables which 
    are used throughout the program to connect. 
     */
    public static void getInputConnect(String theIP, String thePort) {
        IP = theIP;
        int theintPort = Integer.valueOf(thePort);
        PORT_NUM = theintPort;
    }

    /*
    The ConnectToServer Method sets up the trust store initially and then creats
    a SSLSocketFactory which intern uses a socket to start the connection to the
    local server host. It is a boolean function that will stay true if the 
    connection is successful and false if the host in unable to be found.
     */
    public static Boolean ConnectToServer() {
        SSLSocketFactory fac;
        // Set up the trust store.
        System.setProperty("javax.net.ssl.trustStore", "atruststore.jks");
        System.setProperty("javax.net.ssl.trustStorePassword", "chocolate");
        try {
            // Set up a connection to the echo server running on the same machine
            // using SSL.
            fac = (SSLSocketFactory) SSLSocketFactory.getDefault();
            sock = (SSLSocket) fac.createSocket(IP, PORT_NUM);
            sock.startHandshake();
            // Set up the streams for the socket.
            recv = new Scanner(sock.getInputStream());
            send = new PrintWriter(sock.getOutputStream(), true);
        } catch (UnknownHostException ex) {
            System.out.println("Host is unknown.");
            return false;
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }

        return true;
    }

    /*
    The Function Messaging. Both the Login and Create Account
    Buttons use Messaging in order to send messages from the Client to the
    Server and Vice Versa. Depeneding on which button the user on the clients 
    side has pressed a value will be assigned the global variable msg. 
    Depending on its value it can do 1 of 4 options. If the msg variable is a 
    string with the value of "CREATE" this indicates that the client user is
    trying to create a new account in the system, then will send a string to 
    the server containing the client users username password and email. These
    are separated by ":" inorder to gather the information cleanly on the server
    side. The Second Option is if the user client has selected the Login Option.
    The Login Button Allocates the msg variable to equal "AUTH" indicating to
    the system that a message should be sent to the server to authenticate the
    information that the client user has entered in this session of "logging on".
    The 3rd and 4th options are if the user selects none of the options and exits
    before they can accomplish anything in the program to reject a crash on the
    servers end. With options 1 and 2, Since messages were sent to the server,
    the client waits and listens for the server to return a number of strings. 
    There are 4 Strings under which the clients reciever can understand
    1. "OK:AUTH: - The login info is correct and the OTP verification takes place
    2. "NOK" - The login info is incorrect
    3. "OK:" - The Client user successfully Created the new Account
    4. "DUP" = The Client has entered an already existing username in the servers database
    
     */
    public static void Messaging() throws MessagingException, IOException {
        if (msg.startsWith("CREATE")) {
            String messageSend = "CREATE" + getUsernamePass();
            System.out.println("The message sent" + messageSend);
            send.println(messageSend);
            String msgReset = "";
            msg = msgReset;
            // sending CREATE:Alice:Password 
        } else if (msg.startsWith("AUTH")) {
            String EnteredInfo = getUsernamePassOnly();
            String[] splited = EnteredInfo.split(":");
            System.out.println("Test: " + splited[1] + splited[2]);

            //sendSms(splited[1],splited[2],splited[3]);
            String messageSendAuth = "AUTH" + EnteredInfo;
            System.out.println(messageSendAuth + " looking FOR THIS ");
            send.println(messageSendAuth);
            msg = "";
        } else if (msg.equals("")) {

        } else {
            System.out.println("Invalid Command");
            System.exit(0);
        }

        // Send the message to the server.
        String recvMsg = "";
        // Echo the response to the screen.
        boolean boolCheck = true;
        while (boolCheck) { // wait for the server to responsd
            if (recv.hasNext()) { // if the receiver has a message from the server is true
                recvMsg = recv.nextLine();
                boolCheck = false;
            }

            System.out.println("RECV MSG is " + recvMsg);

        }

        if (recvMsg.startsWith("OK:AUTH")) {
            System.out.println("HINT:" + recvMsg);
            String[] OTPsplit = recvMsg.split(":");
            theEmail = OTPsplit[2];
            //int makeOTPint = Integer.valueOf(OTPsplit[1]);
            Random rand = new Random();
            OTP = rand.nextInt(999999);
            String strOTP = String.valueOf(OTP);
            sendEmail(strOTP);
            Scanner n = new Scanner(System.in);
            String inputOTP = JOptionPane.showInputDialog(null, "Enter Your One-Time-Password that was send to your email");
            //String OTPverify = n.nextLine();
            int OTPint = Integer.parseInt(inputOTP);
            if (OTPint != OTP) {

                JOptionPane.showMessageDialog(null, "Verification Unsuccessfull OTP incorrect:(");
            } else if (OTPint == OTP) {
                JOptionPane.showMessageDialog(null, "Verification Successful!");
            }
        } else if (recvMsg.startsWith("NOK")) {
            JOptionPane.showMessageDialog(null, "The Username/Password you entered was incorrect");

        } else if (recvMsg.startsWith("OK:")) { // this means that the user was successfully created  and the 2nd part of the string gathered is the HMAC Key
            String[] HMACExtract = recvMsg.split(":");
            String HMACKey = HMACExtract[1];
            System.out.println("The HMAC Key Recieved from the server is: " + HMACKey);
            JOptionPane.showMessageDialog(null, "User Created Successfully");
        } else if (recvMsg.startsWith("DUP")) {
            JOptionPane.showMessageDialog(null, "The Username you have entered is taken please try another");
        }

        //System.out.println("Server Said: " + recvMsg);
        sock.close();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables

}
